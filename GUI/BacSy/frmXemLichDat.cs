using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using AppDatLichKham.BLL;
using AppDatLichKham.DAL;
using AppDatLichKham.Entity;
using DevExpress.XtraRichEdit.Fields;

namespace AppDatLichKham.GUI.BacSy
{
    public partial class frmXemLichDat : Form
    {
        public frmXemLichDat()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
            dataGridView1.DefaultCellStyle.Font = new Font("Arial", 9F, FontStyle.Bold);
        }
        private List<Button> timeButtons;
        private void frmXemLichDat_Load(object sender, EventArgs e)
        {
            dtpNgaycheck.Value = DateTime.Now;
            pnlBtn.Visible = false;
            // TODO: This line of code loads data into the 'quanLyLichKhamDataSet.ChuyenKhoa' table. You can move, or remove it, as needed.
            //LoadDanhSachLichDat();
            //dataGridView1.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.Fill;
            dataGridView1.AllowUserToResizeColumns = false;
            dataGridView1.AllowUserToResizeRows = false;

            timeButtons = new List<Button>()
            {
                 btn7h, btn7h15, btn7h30, btn7h45,
                 btn8h, btn8h15, btn8h30, btn8h45,
                 btn9h, btn9h15, btn9h30, btn9h45,
                 btn10h, btn10h15, btn10h30, btn10h45,
                 btn11h,
                  btn14h, btn14h15, btn14h30, btn14h45,
                 btn15h, btn15h15, btn15h30, btn15h45,
                 btn16h, btn16h15, btn16h30, btn16h45,
                  btn17h
            };
            foreach (var btn in timeButtons)
            {
                btn.Click += TimeButton_Click;
            }
            btn7h.Tag = new TimeSpan(7, 0, 0);
            btn7h15.Tag = new TimeSpan(7, 15, 0);
            btn7h30.Tag = new TimeSpan(7, 30, 0);
            btn7h45.Tag = new TimeSpan(7, 45, 0);
            btn8h.Tag = new TimeSpan(8, 0, 0);
            btn8h15.Tag = new TimeSpan(8, 15, 0);
            btn8h30.Tag = new TimeSpan(8, 30, 0);
            btn8h45.Tag = new TimeSpan(8, 45, 0);
            btn9h.Tag = new TimeSpan(9, 0, 0);
            btn9h15.Tag = new TimeSpan(9, 15, 0);
            btn9h30.Tag = new TimeSpan(9, 30, 0);
            btn9h45.Tag = new TimeSpan(9, 45, 0);
            btn10h.Tag = new TimeSpan(10, 0, 0);
            btn10h15.Tag = new TimeSpan(10, 15, 0);
            btn10h30.Tag = new TimeSpan(10, 30, 0);
            btn10h45.Tag = new TimeSpan(10, 45, 0);
            btn11h.Tag = new TimeSpan(11, 0, 0);
            btn14h.Tag = new TimeSpan(14, 0, 0);
            btn14h15.Tag = new TimeSpan(14, 15, 0);
            btn14h30.Tag = new TimeSpan(14, 30, 0);
            btn14h45.Tag = new TimeSpan(14, 45, 0);
            btn15h.Tag = new TimeSpan(15, 0, 0);
            btn15h15.Tag = new TimeSpan(15, 15, 0);
            btn15h30.Tag = new TimeSpan(15, 30, 0);
            btn15h45.Tag = new TimeSpan(15, 45, 0);
            btn16h.Tag = new TimeSpan(16, 0, 0);
            btn16h15.Tag = new TimeSpan(16, 15, 0);
            btn16h30.Tag = new TimeSpan(16, 30, 0);
            btn16h45.Tag = new TimeSpan(16, 45, 0);
            btn17h.Tag = new TimeSpan(17, 0, 0);
        }
        TimeSpan selectedTime;
        private void TimeButton_Click(object sender, EventArgs e)
        {
            Color defaultColor = Color.LightGray;
            Color selectedColor = Color.MediumPurple;

            foreach (var btn in timeButtons)
            {
                btn.BackColor = defaultColor;
            }

            Button clickedBtn = sender as Button;
            if (clickedBtn != null)
            {
                clickedBtn.BackColor = selectedColor;
                clickedBtn.Tag = clickedBtn.Tag; // Lưu lại thời gian đã chọn
                selectedTime = (TimeSpan)clickedBtn.Tag;
                LoadDanhSachLichDat();
            }
            LoadDanhSachLichDat();

        }
        private void CapNhatTrangThaiGio(int bacSiID, DateTime ngay)
        {
            foreach (System.Windows.Forms.Control control in pnlBtn.Controls)
            {
                if (control is Button btn && btn.Tag is TimeSpan gio)
                {
                    bool isBusy = DatLichDAL.Instance.CheckCaTrungDatLich(bacSiID, ngay, gio);

                    if (isBusy)
                    {
                        btn.Enabled = true;
                        btn.BackColor = Color.DodgerBlue;
                    }
                    else
                    {
                        btn.BackColor = Color.LightGray;
                        btn.Enabled = false;
                    }
                }
            }
        }
        private void LoadDanhSachLichDat()
        {
            System.Threading.Thread.CurrentThread.CurrentCulture = new System.Globalization.CultureInfo("vi-VN");
            System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo("vi-VN");
            int benhNhanID = StaticThing.idBenhNhanTaiKhoan; // Hoặc lấy từ biến static đã lưu khi đăng nhập
                                                             // Duyệt qua danh sách lịch hẹn và gán tên bác sĩ
            List<DatLich> danhsachDatLich = null;
            if (ckbLoc.Checked)
            {
                danhsachDatLich = DatLichDAL.Instance.GetDatLichByBacSiID(StaticThing.idBacSiTaiKhoan, dtpNgaycheck.Value.Date, selectedTime);
            }
            else
            {
                danhsachDatLich = DatLichDAL.Instance.GetDatLichByBacSiID(StaticThing.idBacSiTaiKhoan);
            }

            var danhSachHienThi = new List<DatLich>();
            DateTime? currentGroupDate = null;

            var danhSachSapXep = danhsachDatLich
            .OrderBy(x => x.NgayHen.Date)              // 1. Ngày hẹn tăng dần
            .ThenByDescending(x => x.KhanCap)          // 2. Khẩn cấp trước
            .ThenByDescending(x => x.TrangThai)        // 3. Trạng thái xác nhận (giả sử: 1 là đã xác nhận)
            .ToList();
            foreach (var item in danhSachSapXep)
            {
                if (currentGroupDate == null || item.NgayHen.Date != currentGroupDate.Value)
                {
                    // Thêm dòng nhóm
                    danhSachHienThi.Add(new DatLich
                    {
                        IsGroupHeader = true,
                        GroupTitle = $"======  {item.NgayHen:dd/MM/yyyy}  ======"
                    });

                    currentGroupDate = item.NgayHen.Date;
                }

                danhSachHienThi.Add(item);
            }

            dataGridView1.DataSource = danhSachHienThi;
            dataGridView1.Columns["DatLichID"].HeaderText = "Lịch Hẹn ID";
            dataGridView1.Columns["BenhNhanID"].HeaderText = "Bệnh Nhân ID";
            dataGridView1.Columns["HoTen"].HeaderText = "Họ tên bệnh nhân";
            dataGridView1.Columns["NgayHen"].HeaderText = "Ngày hẹn";
            dataGridView1.Columns["NgayHen"].DefaultCellStyle.Format = "dd/MM/yyyy";
            dataGridView1.Columns["GioDangKi"].HeaderText = "Giờ đăng kí";
            dataGridView1.Columns["BacSiID"].Visible = false;
            dataGridView1.Columns["BacSiHoTen"].Visible = false;
            dataGridView1.Columns["TrangThaiString"].HeaderText = "Trạng thái";
            dataGridView1.Columns["KhanCapString"].HeaderText = "Khẩn cấp";
            dataGridView1.Columns["BenhNhanID"].Width = dataGridView1.Columns["DatLichID"].Width= 40;
            dataGridView1.Columns["HoTen"].Width = 140;
            dataGridView1.Columns["GioDangKi"].HeaderText = "Giờ đăng kí";
            dataGridView1.Columns["GhiChu"].Visible = false;
            dataGridView1.Columns["SDT"].Visible = false;
            dataGridView1.Columns["GioiTinh"].Visible = false;
            dataGridView1.Columns["GioiTinhString"].HeaderText = "Giới tính";
            dataGridView1.Columns["DiaChi"].Visible = false;
            dataGridView1.Columns["ThoiGian"].HeaderText = "Hẹn vào lúc";
            dataGridView1.Columns["ThoiGian"].DefaultCellStyle.Format = "dd/MM/yyyy HH:mm:ss";
            dataGridView1.Columns["TrangThai"].Visible = false;
            dataGridView1.Columns["KhanCap"].Visible = false;
            dataGridView1.Columns["IsGroupHeader"].Visible = false;
            dataGridView1.Columns["GroupTitle"].Visible = false;

            if (danhsachDatLich.Count == 0)
            {
                lblCount.Text = "0";
            }
            else
            {
                lblCount.Text = danhsachDatLich.Count.ToString();
            }
        }
        private void checkButton1_CheckedChanged(object sender, EventArgs e)
        {

        }

        private void flyoutPanel1_Load(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {
            flyoutPanel1.HidePopup();
        }

        private void pnlMuot_Paint(object sender, PaintEventArgs e)
        {

        }

        private void simpleButton1_Click(object sender, EventArgs e)
        {
            if (flyoutPanel1.IsPopupOpen)
                flyoutPanel1.HidePopup();
            else
                flyoutPanel1.ShowPopup();
        }

        private void flyoutPanelControl1_Paint(object sender, PaintEventArgs e)
        {

        }

        private void gridLookUpEdit1_EditValueChanged(object sender, EventArgs e)
        {

        }

        private void gridControl1_Click(object sender, EventArgs e)
        {

        }

        private void siticoneShapes2_Click(object sender, EventArgs e)
        {

        }

        private void siticoneButton1_Click(object sender, EventArgs e)
        {
            if (DaDuocXacNhan)
            {
                MessageBox.Show("Lịch hẹn đã được xác nhận, không thể xác nhận lại, vui lòng hủy lịch trước");
                return;
            }
            if (DatLichDAL.Instance.XacNhanLichHenMini(Convert.ToInt32(txtDatLichid.Text)))
            {
                MessageBox.Show("Xác nhận lịch hẹn thành công");
                LoadDanhSachLichDat();
                flyoutPanel1.HidePopup(true);
            }
            else
            {
                MessageBox.Show("Xác nhận lịch hẹn thất bại");
            }
        }

        private void lblGhichu_Click(object sender, EventArgs e)
        {

        }

        private void label6_Click(object sender, EventArgs e)
        {

        }

        private void lblHoTen_Click(object sender, EventArgs e)
        {

        }

        private void label5_Click(object sender, EventArgs e)
        {

        }

        private void txtGhichu_TextChanged(object sender, EventArgs e)
        {

        }

        private void label7_Click(object sender, EventArgs e)
        {

        }

        private void lblGioiTinh_Click(object sender, EventArgs e)
        {

        }

        private void lblDiachi_Click(object sender, EventArgs e)
        {

        }

        private void btnDangKi_Click(object sender, EventArgs e)
        {
            if (DatLichDAL.Instance.HuyLichHen(Convert.ToInt32(txtDatLichid.Text)))
            {
                MessageBox.Show("Từ chối lịch hẹn thành công");
                LoadDanhSachLichDat();
                flyoutPanel1.HidePopup();
            }
            else
            {
                MessageBox.Show("Từ chối lịch hẹn thất bại");
            }
        }

        private void label9_Click(object sender, EventArgs e)
        {

        }

        private void lblSdt_Click(object sender, EventArgs e)
        {

        }

        private void lblKhancap_Click(object sender, EventArgs e)
        {

        }

        private void button1_Click_1(object sender, EventArgs e)
        {
            if (flyoutPanel1.IsPopupOpen)
                flyoutPanel1.HidePopup();
            else
                flyoutPanel1.ShowPopup();
        }

        private void dtpNgaycheck_ValueChanged(object sender, EventArgs e)
        {
            pnlBtn.Visible = true;
            flyoutPanel1.HidePopup();
            CapNhatTrangThaiGio(StaticThing.idBacSiTaiKhoan, dtpNgaycheck.Value.Date);
            LoadDanhSachLichDat();
        }

        private void dataGridView1_RowPrePaint(object sender, DataGridViewRowPrePaintEventArgs e)
        {
            var dgv = sender as DataGridView;
            var row = dgv.Rows[e.RowIndex];
            if (row.Cells["KhanCap"].Value is bool isKhanCap && isKhanCap)
            {
                row.DefaultCellStyle.BackColor = Color.Red;
                row.DefaultCellStyle.ForeColor = Color.White;
            }
            if (row.Cells["TrangThai"].Value is bool isDaXacNhan && isDaXacNhan)
            {
                row.DefaultCellStyle.BackColor = Color.LightGreen; // Xanh lá nhạt cho dễ nhìn
                row.DefaultCellStyle.ForeColor = Color.Black;
            }
            else if (row.Cells["TrangThai"].Value is bool isDaXacNhan1 && !isDaXacNhan1)
            {
                row.DefaultCellStyle.BackColor = Color.Red;
                row.DefaultCellStyle.ForeColor = Color.White;
            }
            else
            {
                // Trạng thái mặc định nếu không khẩn cấp và chưa xác nhận
                row.DefaultCellStyle.BackColor = Color.White;
                row.DefaultCellStyle.ForeColor = Color.Black;
            }
        }

        private void dataGridView1_CellClick(object sender, DataGridViewCellEventArgs e)
        {
            if (e.RowIndex >= 0) // Kiểm tra xem có click vào hàng hợp lệ không
            {
                DataGridViewRow row = dataGridView1.Rows[e.RowIndex];
                if (row.DataBoundItem is DatLich lich && lich.IsGroupHeader)
                    return;
                flyoutPanel1.ShowPopup();
                // Ví dụ: Lấy giá trị từ hàng được chọn và hiển thị lên các TextBox
                lblHoTen.Text = row.Cells["HoTen"].Value.ToString();

                lblDiachi.Text = row.Cells["DiaChi"].Value.ToString();
                if (row.Cells["GioiTinh"].Value.ToString() == "True")
                {
                    lblGioiTinh.Text = "Nam";
                }
                else
                {
                    lblGioiTinh.Text = "Nữ";
                }
                lblSdt.Text = row.Cells["SDT"].Value.ToString();
                lblDiachi.Text = row.Cells["DiaChi"].Value.ToString();
                lblSdt.Text = row.Cells["SDT"].Value.ToString();
                txtGhichu.Text = row.Cells["GhiChu"].Value.ToString();
                if (row.Cells["KhanCap"].Value.ToString() == "True")
                {
                    lblKhancap.Visible = true;
                }
                else
                {
                    lblKhancap.Visible = false;
                }
                txtDatLichid.Text = row.Cells["DatLichID"].Value.ToString();
                if (DatLichBLL.Instance.DemSoLichDaXacNhan(row.Cells["BacSiID"].Value.ToString(), row.Cells["Ngayhen"].Value.ToString(), row.Cells["GioDangKi"].Value.ToString()) >= 1)
                {
                    DaDuocXacNhan = true;
                }
                else
                {
                    DaDuocXacNhan = false;
                }
            }
        }
        bool DaDuocXacNhan;

        private void siticoneCircleButton2_Click(object sender, EventArgs e)
        {
            if (dtpNgaycheck.Value.DayOfWeek != DayOfWeek.Friday)
            {
                dtpNgaycheck.Value = dtpNgaycheck.Value.AddDays(+1);
            }
            else
            {
                dtpNgaycheck.Value = dtpNgaycheck.Value.AddDays(+3);
            }
        }

        private void siticoneCircleButton1_Click(object sender, EventArgs e)
        {
            if (dtpNgaycheck.Value.DayOfWeek != DayOfWeek.Monday)
            {
                dtpNgaycheck.Value = dtpNgaycheck.Value.AddDays(-1);
            }
            else
            {
                dtpNgaycheck.Value = dtpNgaycheck.Value.AddDays(-3);
            }
        }

        private void ckbLoc_CheckedChanged(object sender, EventArgs e)
        {
            LoadDanhSachLichDat();
        }

        private void dataGridView1_CellFormatting(object sender, DataGridViewCellFormattingEventArgs e)
        {
            if (e.RowIndex < 0 || e.RowIndex >= dataGridView1.Rows.Count || e.ColumnIndex < 0)
                return;

            if (dataGridView1.Rows[e.RowIndex].DataBoundItem is DatLich lich && lich.IsGroupHeader)
            {
                e.CellStyle.BackColor = Color.LightGray;
                e.CellStyle.ForeColor = Color.Black;
                e.CellStyle.Font = new Font(e.CellStyle.Font ?? dataGridView1.Font, FontStyle.Bold);
                e.CellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
                e.CellStyle.SelectionBackColor = Color.LightGray;
                e.CellStyle.SelectionForeColor = Color.Black;

                e.Value = string.Empty;
                e.FormattingApplied = true;
            }
        }

        private void dataGridView1_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            if (e.RowIndex < 0 || e.RowIndex >= dataGridView1.Rows.Count || e.ColumnIndex < 0)
                return;

            var row = dataGridView1.Rows[e.RowIndex];

            if (row.DataBoundItem is DatLich lich && lich.IsGroupHeader)
            {
                e.Handled = true;

                using (Brush backBrush = new SolidBrush(Color.AliceBlue))
                {
                    e.Graphics.FillRectangle(backBrush, e.CellBounds);
                }
   
                    int rowLeft = dataGridView1.RowHeadersVisible ? dataGridView1.RowHeadersWidth : 0;
                    int totalWidth = dataGridView1.Columns.GetColumnsWidth(DataGridViewElementStates.Visible); 
                    Rectangle rowBounds = new Rectangle(
                        rowLeft - dataGridView1.HorizontalScrollingOffset,
                        e.CellBounds.Y,
                        totalWidth,
                        e.CellBounds.Height);
                string text = lich.GroupTitle;
                    if (!string.IsNullOrEmpty(text))
                    {
                    using (Font font = new Font("Microsoft Sans Serif", 10, FontStyle.Regular))
                    {
                        using (StringFormat sf = new StringFormat
                        {
                            Alignment = StringAlignment.Center,
                            LineAlignment = StringAlignment.Center
                        })
                        {
                            e.Graphics.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAlias;
                            e.Graphics.DrawString(text, font,Brushes.RoyalBlue, rowBounds, sf);
                        }
                    }
                   }
            
            }
        }

        private void dataGridView1_MouseDown(object sender, MouseEventArgs e)
        {
            var hitTest = dataGridView1.HitTest(e.X, e.Y);
            if (hitTest.RowIndex >= 0 && hitTest.RowIndex < dataGridView1.Rows.Count)
            {
                var row = dataGridView1.Rows[hitTest.RowIndex];
                if (row.DataBoundItem is DatLich lich && lich.IsGroupHeader)
                {
                    // Ngăn hành động mặc định khi nhấp chuột
                    dataGridView1.ClearSelection();
                }
            }
        }

        private void flyoutPanelControl1_Paint_1(object sender, PaintEventArgs e)
        {

        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }
    }
}
